Since Linux uses the inotify package to observe filesystem events, individual files or directories.
React / Angular hot-reloads and recompiles files on save it needs to keep track of all project's files. Increasing the inotify watch limit should hide the warning messages.

# insert the new value into the system config
echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p

# check that the new value was applied
cat /proc/sys/fs/inotify/max_user_watches

# config variable name (not runnable)
fs.inotify.max_user_watches=524288


kill a localhost process in ubantu
sudo kill -9 $(sudo lsof -t -i:port_number)


when should the axios interceptors be ejected 
Eject interceptor
axios.interceptors.response.eject(interceptor); <---- What does this do

Internally, interceptors.response is an array of interceptors, the method axios.interceptors.response.use return the id of the new interceptor. Calling eject passing the id of the interceptor will set the corresponding item in the array to null, and the interceptor has no effect anymore.

When we receive the response code 401, we use the interceptor to send another request to get the token. To avoid the infinity loop if the latter also receives the response code 401, we eject the interceptor in this case.

Resend original request
return axios(error.response.config); <--- what does this do

After receiving the token, we want to resend the original request, its configuration is stored in error.response.config according to the response schema

To use the function, call it before sending the request. (People talk about it in the thread of the accepted answer.)

css toaster ---> 
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Toaster</title>

   <style>
        .toast {
            width: 256px;
            height: 48px;
            margin: 30px auto;
            background: #ffffff;
            border-radius: 6px;
            border: 1px solid black;
            display: flex;
            align-items: center;
        }

        .close {
            width: 6px;
            height: 100%;
            border-radius: 6px 0 0 6px;
            cursor: pointer;
            background: #00b5fd;
            transition: width 300ms;
            background-repeat: no-repeat;
            background-size: 12px;
            background-position: center;
        }

        .message {
            flex-grow: 1;
            padding: 12px;
        }

        .toast:hover > .close {
            width: 36px;
            background-image: url('./add.png');
        }
    </style>
</head>

<body>
    <div class="toast">
        <div class="close">
        </div>
        <div class="message">successfull</div>
    </div>
</body>

</html>
flutter two way
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:webview_flutter/webview_flutter.dart';

void main() => runApp(MyApp());

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);

  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData(
        // This is the theme of your application.
        //
        // Try running your application with "flutter run". You'll see the
        // application has a blue toolbar. Then, without quitting the app, try
        // changing the primarySwatch below to Colors.green and then invoke
        // "hot reload" (press "r" in the console where you ran "flutter run",
        // or simply save your changes to "hot reload" in a Flutter IDE).
        // Notice that the counter didn't reset back to zero; the application
        // is not restarted.
        primarySwatch: Colors.blue,
      ),
      home: const MyHomePage(title: 'Flutter Demo Home Page'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({Key? key, required this.title}) : super(key: key);

  final String title;

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  @override
  Widget build(BuildContext context) {
    WebViewController? _webViewController;
    // This method is rerun every time setState is called, for instance as done
    // by the _incrementCounter method above.
    //
    // The Flutter framework has been optimized to make rerunning build methods
    // fast, so that you can just rebuild anything that needs updating rather
    // than having to individually change instances of widgets.

    return Scaffold(
      appBar: AppBar(
        // Here we take the value from the MyHomePage object that was created by
        // the App.build method, and use it to set our appbar title.
        title: Text(widget.title),
      ),
      // ignore: sized_box_for_whitespace
      body: Padding(
        padding: const EdgeInsets.all(8.0),
        child: WebView(
          initialUrl: Uri.encodeFull(
              'https://fae1-2409-4053-2e09-1ad0-66ad-712f-a0d6-bcb6.in.ngrok.io/'),

          javascriptMode: JavascriptMode.unrestricted,
          debuggingEnabled: true,
          onWebViewCreated: (WebViewController webViewController) {
            _webViewController = webViewController;
          },

          onProgress: (int progress) {
            print('WebView is loading (progress : $progress%)');
            // Future.delayed(const Duration(milliseconds: 3000), () {

            Map<String, dynamic> map = {
              "emailSubject": "new feature added huh email0",
              "rawEmailSubject": "test email0",
              "emailContent": "ema con",
              "rawEmailContent": "ema con",
            };
            List data = ["hello", "chatvor", "sasx", "ASCDACS"];
            var jsonData = jsonEncode(data);
            var jsonStr = jsonEncode(map); //data.toString();
            _webViewController!.runJavascriptReturningResult(
                'campaignVariablesHandler($jsonData)');
            _webViewController!
                .runJavascriptReturningResult('prefernceHandler()');
          },

          javascriptChannels: <JavascriptChannel>{
            JavascriptChannel(
              name: 'rawDataHandlerToMobile',
              onMessageReceived: (JavascriptMessage message) {
                print("message from the web view=\"${message.message}\"");
              },
            ),
          },

          navigationDelegate: (NavigationRequest request) {
            print('allowing navigation to $request');
            return NavigationDecision.navigate;
          },

          onPageStarted: (String url) {
            print('Page started loading: $url');
          },

          onPageFinished: (String url) async {
            print('Page finished loading: $url');
          },

          // gestureNavigationEnabled: true,

          // backgroundColor: const Color(0x00000000),
        ),
      ), // This trailing comma makes auto-formatting nicer for build methods.
    );
  }
}

/*******************************************/

import {
  View,
  Text,
  Platform,
  KeyboardAvoidingView,
  SafeAreaView,
  TextInput,
  StyleSheet,
  TouchableOpacity,
  ScrollView,
  FlatList,
} from "react-native";
import React, { useEffect, useState } from "react";
import Fire from "../firebaseConfig";
import { Ionicons } from "@expo/vector-icons";
import {
  collection,
  addDoc,
  doc,
  getDocs,
  getFirestore,
  onSnapshot,
  serverTimestamp,
  query,
  orderBy,
  limit,
} from "firebase/firestore";
import moment from "moment";


const ChatScreen = (props) => {
  const [messages, setMessages] = useState([]);
  const [chatMessage, setChatMessage] = React.useState("");
  const currentUser = props?.route.params;
  const db = getFirestore(Fire);
  const queryRef = query(
    collection(db, "users"),
    orderBy("createdAt"),
    limit(8)
  );

  useEffect(() => {
    onSnapshot(queryRef, (snapshot) => {
      const messageDoc = [...messages];
      snapshot.forEach((doc) => {
        messageDoc.push({ _id: doc.id, ...doc.data() });
      });
      setMessages([...messageDoc]);
    });
  }, []);

  // const getAllCollection = async () => {
  //   const docs = [];
  //   const querySnapshot = await getDocs(queryRef);
  //   querySnapshot.forEach((doc) => {
  //     docs.push({
  //       _id: doc.id,
  //       ...doc.data(),
  //     });
  //   });
  //   setMessages([...docs]);
  // };

  const handleSend = async () => {
    // console.log("started sending message");
    try {
      const docRef = await addDoc(collection(db, "users"), {
        userName: currentUser.email,
        userId: currentUser.uid,
        chatMessage,
        createdAt: serverTimestamp(),
      });
      console.log("Document written with ID: ", docRef);
    } catch (e) {
      console.error("Error adding document: ", e);
    }
    setChatMessage("");
  };

  return (
    <SafeAreaView style={styles.chatRoomWrapper}>
      <ScrollView style={styles.chatRoom} alwaysBounceHorizontal={true}>
        <FlatList
          data={messages}
          renderItem={({ item }) => {
            const position =
              currentUser.uid === item.userId
                ? "flex-end"
                : "flex-start";
            return (
              <View
                key={item._id}
                style={{ ...styles.bubble, alignSelf: position }}
              >
                <Text
                  style={{ color: "white", fontSize: 20, fontWeight: "600" }}
                >
                  {item.chatMessage}
                </Text>
                <Text
                  style={{
                    textAlign: "right",
                    color: "white",
                    fontWeight: "600",
                    marginRight: 7,
                  }}
                >
                  {/* {moment(item.createdAt).format("hrs")} */}
                </Text>
              </View>
            );
          }}
          keyExtractor={(item) => item._id}
        />
      </ScrollView>

      <View style={styles.messageBox}>
        <View style={styles.inputWrapper}>
          <TextInput
            style={styles.input}
            placeholder="Type something..."
            onChangeText={(chat) => setChatMessage(chat)}
            value={chatMessage}
          />
        </View>

        <View style={styles.btnWrapper}>
          <TouchableOpacity style={styles.btn} onPress={handleSend}>
            <Ionicons name="md-arrow-forward" size={29} color={"white"} />
          </TouchableOpacity>
        </View>
      </View>
    </SafeAreaView>
  );
};
export default ChatScreen;

const styles = StyleSheet.create({
  chatRoomWrapper: {
    flex: 1,
  },
  chatRoom: {
    flex: 1,
    padding: 8,
    backgroundColor: "#fff",
    flexDirection: "column",
  },
  bubble: {
    flex: 1,
    padding: 6,
    marginTop: 30,
    backgroundColor: "#75E6DA",
    width: 200,
    borderRadius: 50,
  },
  messageBox: {
    flex: 1 / 6,
    backgroundColor: "#fff",
    flexDirection: "row",
  },
  inputWrapper: {
    flex: 1,
    padding: 3,
    justifyContent: "center",
  },
  input: {
    borderColor: "#75E6DA",
    borderWidth: 2,
    padding: 14,
    borderRadius: 30,
    marginLeft: 10,
  },
  btnWrapper: {
    flex: 1 / 4,
    justifyContent: "center",
    alignItems: "center",
  },
  btn: {
    borderColor: "white",
    backgroundColor: "#75E6DA",
    borderWidth: 2,
    height: 50,
    width: 50,
    borderRadius: 50 / 2,
    justifyContent: "center",
    alignItems: "center",
  },
});

/*******************************************************/


import React, {useCallback, useRef} from 'react'

function useHookWithRefCallback() {
  const ref = useRef(null)
  const setRef = useCallback(node => {
    if (ref.current) {
      // Make sure to cleanup any events/references added to the last instance
    }
    
    if (node) {
      // Check if a node is actually passed. Otherwise node would be null.
      // You can now do what you need to, addEventListeners, measure, etc.
    }
    
    // Save a reference to the node
    ref.current = node
  }, [])
  
  return [setRef]
}

function Component() {
  // In your component you'll still recieve a `ref`, but it 
  // will be a callback function instead of a Ref Object
  const [ref] = useHookWithRefCallback()
  
  return <div ref={ref}>Ref element</div>
}
